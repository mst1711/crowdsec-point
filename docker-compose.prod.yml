# Продакшен конфигурация Docker Compose для Nginx + CrowdSec
# Используйте этот файл для развертывания в продакшене

version: '3.8'

services:
  nginx:
    image: nginx:alpine
    container_name: nginx-server-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro  # SSL сертификаты
      - ./logs/nginx:/var/log/nginx
      - ./html:/usr/share/nginx/html:ro
    depends_on:
      - crowdsec
    networks:
      - crowdsec-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/nginx_status"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  crowdsec:
    image: crowdsecurity/crowdsec:latest
    container_name: crowdsec-prod
    environment:
      - COLLECTIONS=crowdsecurity/nginx crowdsecurity/base-http-scenarios crowdsecurity/http-cve
      - DISABLE_AGENT=false
      - DISABLE_LOCAL_API=false
      - LEVEL_INFO=true
      - ENROLL_KEY=${CROWDSEC_ENROLL_KEY}  # Для подключения к CrowdSec Cloud
    volumes:
      - ./crowdsec/acquis.yaml:/etc/crowdsec/acquis.yaml:ro
      - ./crowdsec/config.yaml:/etc/crowdsec/config.yaml:ro
      - ./crowdsec/profiles.yaml:/etc/crowdsec/profiles.yaml:ro
      - ./crowdsec/notifications:/etc/crowdsec/notifications:ro
      - ./logs/nginx:/var/log/nginx:ro
      - crowdsec-db:/var/lib/crowdsec/data
      - crowdsec-config:/etc/crowdsec
    networks:
      - crowdsec-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "cscli", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Bouncer для автоматической блокировки (опционально)
  nginx-bouncer:
    image: crowdsecurity/nginx-bouncer:latest
    container_name: nginx-bouncer-prod
    environment:
      - CROWDSEC_BOUNCER_API_KEY=${CROWDSEC_BOUNCER_KEY}
      - CROWDSEC_AGENT_HOST=crowdsec:8080
    volumes:
      - ./nginx/bouncer.conf:/etc/nginx/conf.d/bouncer.conf:ro
    depends_on:
      - crowdsec
    networks:
      - crowdsec-network
    restart: unless-stopped

  # Prometheus для метрик (опционально)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus-prod
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - crowdsec-network
    restart: unless-stopped

  # Metabase для визуализации данных CrowdSec
  dashboard:
    image: metabase/metabase:latest
    container_name: metabase-prod
    ports:
      - "3000:3000"
    environment:
      - MB_DB_TYPE=sqlite
      - MB_DB_FILE=/metabase-data/metabase.db
      - MB_DB_CONNECTION_URI=sqlite:/metabase-data/metabase.db
    volumes:
      - metabase-data:/metabase-data
      - crowdsec-db:/crowdsec-data:ro
    depends_on:
      - crowdsec
    networks:
      - crowdsec-network
    restart: unless-stopped

  # Grafana для дополнительной визуализации (опционально)
  grafana:
    image: grafana/grafana:latest
    container_name: grafana-prod
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - crowdsec-network
    restart: unless-stopped

  # Filebeat для отправки логов в ELK (опционально)
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.11.0
    container_name: filebeat-prod
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs/nginx:/var/log/nginx:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST}
      - KIBANA_HOST=${KIBANA_HOST}
    networks:
      - crowdsec-network
    restart: unless-stopped

volumes:
  crowdsec-db:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/crowdsec/data  # Постоянное хранение на хосте
  crowdsec-config:
    driver: local
  prometheus-data:
    driver: local
  metabase-data:
    driver: local
  grafana-data:
    driver: local

networks:
  crowdsec-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Дополнительные настройки для продакшена
x-logging: &default-logging
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"

# Применение логирования ко всем сервисам
services:
  nginx:
    logging: *default-logging
  crowdsec:
    logging: *default-logging
  nginx-bouncer:
    logging: *default-logging
  prometheus:
    logging: *default-logging
  grafana:
    logging: *default-logging
  filebeat:
    logging: *default-logging